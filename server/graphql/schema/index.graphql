enum Role {
  USER
  DRIVER
}

type Query {
  isAuthorizedUser: Boolean @auth(requires: USER)
  isAuthorizedDriver: Boolean @auth(requires: DRIVER)
  isDriverWaiting: Boolean @auth(requires: DRIVER)
  userHistory(page: Int): [UserHistoryResult] @auth(requires: USER)
}

type Mutation {
  userSignup(id: String!, password: String!, name: String!, phone: String!): Response
  userSignin(id: String!, password: String!): Response
  driverSignup(info: DriverSignupInfo!): Response
  driverSignin(id: String!, password: String!): Response
  signout(type: String!): Response
  requestMatching(request: UserRequestInput): Response @auth(requires: USER)
  stopMatching: Response @auth(requires: USER)
  startService: Response @auth(requires: DRIVER)
  stopService: Response @auth(requires: DRIVER)
  updateDriverLocation(location: LatLngInput, uid: String): Response @auth(requires: DRIVER)
  approveMatching(uid: String): Response @auth(requires: DRIVER)
  userOnBoard(uid: String): Response @auth(requires: DRIVER)
  saveUserHistory(info: HistoryInfo!): Response @auth(requires: USER)
  arriveDestination(uid: String): Response @auth(requires: DRIVER)
}

type Subscription {
  userMatchingSub: MatchedTaxi @auth(requires: USER)
  driverLocationSub(taxiId: String): DriverStatus @auth(requires: USER)
  driverServiceSub: UserRequestToDriver @auth(requires: DRIVER)
}

type Response {
  success: Boolean!
  message: String
}
type LatLng {
  lat: Float
  lng: Float
}
type MatchedTaxi {
  id: String
  name: String
  carModel: String
  carColor: String
  plateNumber: String
  location: LatLng
}
type LocationInfo {
  name: String
  latlng: LatLng
}
type UserRequest {
  startLocation: LocationInfo
  endLocation: LocationInfo
}
type UserRequestToDriver {
  request: UserRequest
  uid: String
  expirationTime: String
  tel: String
}
type DriverStatus {
  lat: Float
  lng: Float
  board: Boolean
  arrive: Boolean
}
type UserHistoryResult {
  id: String
  request: UserRequest
  fee: Int
  startTime: String
  endTime: String
  carModel: String
  plateNumber: String
}

input DriverSignupInfo {
  id: String!
  password: String!
  name: String!
  phone: String!
  licenseNumber: String!
  carModel: String!
  plateNumber: String!
  carColor: String!
}
input LatLngInput {
  lat: Float
  lng: Float
}
input MatchedTaxiInput {
  id: String
  name: String
  carModel: String
  carColor: String
  plateNumber: String
}
input LocationInfoInput {
  name: String
  latlng: LatLngInput
}
input UserRequestInput {
  startLocation: LocationInfoInput
  endLocation: LocationInfoInput
}
input HistoryInfo {
  request: UserRequestInput!
  fee: Int!
  startTime: String!
  endTime: String!
  carModel: String!
  plateNumber: String!
}

directive @auth(requires: Role!) on FIELD_DEFINITION
